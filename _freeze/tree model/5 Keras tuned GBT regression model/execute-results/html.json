{
  "hash": "15beb8881f347555096f26328fb50868",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Keras tuned Gradient BoostedTrees Model regression model\"\nsubtitle: \"with house price data\"\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n#  package\n\n\n## download package\n\n::: {#70063981 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nos.system('pip install tensorflow_decision_forests')\n```\n:::\n\n\n## load package\n\n::: {#d96d5f1c .cell execution_count=2}\n``` {.python .cell-code}\nimport os\n# Keep using Keras 2\nos.environ['TF_USE_LEGACY_KERAS'] = '1'\n\nimport tensorflow_decision_forests as tfdf\n\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tf_keras\nimport math\n```\n:::\n\n\n::: {#0d294c44 .cell execution_count=3}\n``` {.python .cell-code}\n# Check the version of TensorFlow Decision Forests\nprint(\"Found TensorFlow Decision Forests v\" + tfdf.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound TensorFlow Decision Forests v1.9.0\n```\n:::\n:::\n\n\n# data\n\ndata download form [kaggle](https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques/data)\n\n\n## read data\n\n::: {#5049f36c .cell execution_count=4}\n``` {.python .cell-code}\ntrain_file_path = \"data/train.csv\"\ndataset_df = pd.read_csv(train_file_path)\nprint(\"Full train dataset shape is {}\".format(dataset_df.shape))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFull train dataset shape is (1460, 81)\n```\n:::\n:::\n\n\n::: {#c274b836 .cell execution_count=5}\n``` {.python .cell-code}\ndataset_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 81 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#bc0ef836 .cell execution_count=6}\n``` {.python .cell-code}\ndataset_df = dataset_df.drop('Id', axis=1)\ndataset_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>FR2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 80 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#3ea26634 .cell execution_count=7}\n``` {.python .cell-code}\n#dataset_df.info()\n```\n:::\n\n\n## data pre\n\n::: {#5156a58c .cell execution_count=8}\n``` {.python .cell-code}\nimport numpy as np\ndef split_dataset(dataset, test_ratio=0.30):\n  test_indices = np.random.rand(len(dataset)) < test_ratio\n  return dataset[~test_indices], dataset[test_indices]\n\ntrain_ds_pd, valid_ds_pd = split_dataset(dataset_df)\nprint(\"{} examples in training, {} examples in testing.\".format(\n    len(train_ds_pd), len(valid_ds_pd)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1006 examples in training, 454 examples in testing.\n```\n:::\n:::\n\n\n::: {#d5d16ce5 .cell execution_count=9}\n``` {.python .cell-code}\nlabel = 'SalePrice'\ntrain_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_ds_pd, label=label, task = tfdf.keras.Task.REGRESSION)\nvalid_ds = tfdf.keras.pd_dataframe_to_tf_dataset(valid_ds_pd, label=label, task = tfdf.keras.Task.REGRESSION)\n```\n:::\n\n\n# model\n\n\n## define tuning model with \n\n::: {#4a376421 .cell execution_count=10}\n``` {.python .cell-code}\n# A good template of hyper-parameters. A configuration that is generally better than the default parameters without being more expensive\nmodel_8 = tfdf.keras.GradientBoostedTreesModel(task = tfdf.keras.Task.REGRESSION\n                                                ,hyperparameter_template=\"better_default\"\n                                                )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nResolve hyper-parameter template \"better_default\" to \"better_default@v1\" -> {'growing_strategy': 'BEST_FIRST_GLOBAL'}.\nUse /var/folders/v3/pzt9c47n1nbcsmybsg_w0lhw0000gn/T/tmpm1wep0fc as temporary training directory\n```\n:::\n:::\n\n\n## compile model\n\n::: {#208c4a56 .cell execution_count=11}\n``` {.python .cell-code}\nmodel_8.compile(metrics=[\"mse\"])\n```\n:::\n\n\n## Train the model\n\n::: {#b99c0063 .cell execution_count=12}\n``` {.python .cell-code}\nmodel_8.fit(train_ds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading training dataset...\nTraining dataset read in 0:00:01.657773. Found 1006 examples.\nTraining model...\nModel trained in 0:00:00.829118\nCompiling model...\nModel compiled.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n<tf_keras.src.callbacks.History at 0x28502f4d0>\n```\n:::\n:::\n\n\n::: {#fdfe85cf .cell execution_count=13}\n``` {.python .cell-code}\nevaluation = model_8.evaluate(valid_ds, return_dict=True)\nprint()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/1 [==============================] - ETA: 0s - loss: 0.0000e+00 - mse: 1009853504.0000\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 [==============================] - 2s 2s/step - loss: 0.0000e+00 - mse: 1009853504.0000\n\n```\n:::\n:::\n\n\n## Evaluate the model\n\n::: {#f5df5eff .cell execution_count=14}\n``` {.python .cell-code}\nevaluation = model_8.evaluate(valid_ds, return_dict=True)\nprint()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/1 [==============================] - ETA: 0s - loss: 0.0000e+00 - mse: 1009853504.0000\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 [==============================] - 0s 147ms/step - loss: 0.0000e+00 - mse: 1009853504.0000\n\n```\n:::\n:::\n\n\n::: {#25ffd59e .cell execution_count=15}\n``` {.python .cell-code}\nfor name, value in evaluation.items():\n  mse=value\n```\n:::\n\n\nRMSE\n\n::: {#fe414aa4 .cell execution_count=16}\n``` {.python .cell-code}\nimport math\nmath.sqrt(mse)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n31778.192270801057\n```\n:::\n:::\n\n\n::: {#fefe2a02 .cell execution_count=17}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nlogs = model_8.make_inspector().training_logs()\nplt.plot([log.num_trees for log in logs], [log.evaluation.rmse for log in logs])\nplt.xlabel(\"Number of trees\")\nplt.ylabel(\"RMSE (out-of-bag)\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](5 Keras tuned GBT regression model_files/figure-html/cell-18-output-1.png){width=610 height=431}\n:::\n:::\n\n\n# reference:\n\nhttps://colab.research.google.com/github/tensorflow/decision-forests/blob/main/documentation/tutorials/beginner_colab.ipynb#scrollTo=xUy4ULEMtDXB\n\n",
    "supporting": [
      "5 Keras tuned GBT regression model_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}