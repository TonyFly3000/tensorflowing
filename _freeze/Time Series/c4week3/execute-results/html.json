{
  "hash": "9505c947bd5262c5513d1506d7afa86e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"W3:Recurrent Neural Networks for Time Series\"\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\nWeek 3 Recurrent Neural Networks for Time Series\n\nRecurrent Neural networks and Long Short Term Memory networks are really useful to classify and predict on sequential data. This week we'll explore using them with time series...\n\n![](images/Screenshot%202024-05-01%20at%2017.31.14.png){width=\"400\"}\n\n::: {#5189bb06 .cell execution_count=1}\n``` {.python .cell-code}\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n# Utilities\n\n::: {#48afcea7 .cell execution_count=2}\n``` {.python .cell-code}\ndef plot_series(time, series, format=\"-\", start=0, end=None):\n    \"\"\"\n    Visualizes time series data\n\n    Args:\n      time (array of int) - contains the time steps\n      series (array of int) - contains the measurements for each time step\n      format - line style when plotting the graph\n      start - first time step to plot\n      end - last time step to plot\n    \"\"\"\n\n    # Setup dimensions of the graph figure\n    plt.figure(figsize=(10, 6))\n    \n    if type(series) is tuple:\n\n      for series_num in series:\n        # Plot the time series data\n        plt.plot(time[start:end], series_num[start:end], format)\n\n    else:\n      # Plot the time series data\n      plt.plot(time[start:end], series[start:end], format)\n\n    # Label the x-axis\n    plt.xlabel(\"Time\")\n\n    # Label the y-axis\n    plt.ylabel(\"Value\")\n\n    # Overlay a grid on the graph\n    plt.grid(True)\n\n    # Draw the graph on screen\n    plt.show()\n\ndef trend(time, slope=0):\n    \"\"\"\n    Generates synthetic data that follows a straight line given a slope value.\n\n    Args:\n      time (array of int) - contains the time steps\n      slope (float) - determines the direction and steepness of the line\n\n    Returns:\n      series (array of float) - measurements that follow a straight line\n    \"\"\"\n\n    # Compute the linear series given the slope\n    series = slope * time\n\n    return series\n\ndef seasonal_pattern(season_time):\n    \"\"\"\n    Just an arbitrary pattern, you can change it if you wish\n    \n    Args:\n      season_time (array of float) - contains the measurements per time step\n\n    Returns:\n      data_pattern (array of float) -  contains revised measurement values according \n                                  to the defined pattern\n    \"\"\"\n\n    # Generate the values using an arbitrary pattern\n    data_pattern = np.where(season_time < 0.4,\n                    np.cos(season_time * 2 * np.pi),\n                    1 / np.exp(3 * season_time))\n    \n    return data_pattern\n\ndef seasonality(time, period, amplitude=1, phase=0):\n    \"\"\"\n    Repeats the same pattern at each period\n\n    Args:\n      time (array of int) - contains the time steps\n      period (int) - number of time steps before the pattern repeats\n      amplitude (int) - peak measured value in a period\n      phase (int) - number of time steps to shift the measured values\n\n    Returns:\n      data_pattern (array of float) - seasonal data scaled by the defined amplitude\n    \"\"\"\n    \n    # Define the measured values per period\n    season_time = ((time + phase) % period) / period\n\n    # Generates the seasonal data scaled by the defined amplitude\n    data_pattern = amplitude * seasonal_pattern(season_time)\n\n    return data_pattern\n\ndef noise(time, noise_level=1, seed=None):\n    \"\"\"Generates a normally distributed noisy signal\n\n    Args:\n      time (array of int) - contains the time steps\n      noise_level (float) - scaling factor for the generated signal\n      seed (int) - number generator seed for repeatability\n\n    Returns:\n      noise (array of float) - the noisy signal\n    \"\"\"\n\n    # Initialize the random number generator\n    rnd = np.random.RandomState(seed)\n\n    # Generate a random number for each time step and scale by the noise level\n    noise = rnd.randn(len(time)) * noise_level\n    \n    return noise\n```\n:::\n\n\n# Generate the Synthetic Data\n\n::: {#b917d01b .cell execution_count=3}\n``` {.python .cell-code}\n# Parameters\ntime = np.arange(4 * 365 + 1, dtype=\"float32\")\nbaseline = 10\namplitude = 40\nslope = 0.05\nnoise_level = 5\n\n# Create the series\nseries = baseline + trend(time, slope) + seasonality(time, period=365, amplitude=amplitude)\n\n# Update with noise\nseries += noise(time, noise_level, seed=42)\n\n# Plot the results\nplot_series(time, series)\n```\n\n::: {.cell-output .cell-output-display}\n![](c4week3_files/figure-html/cell-4-output-1.png){width=819 height=503}\n:::\n:::\n\n\n# Split the Dataset\n\n::: {#9649ca19 .cell execution_count=4}\n``` {.python .cell-code}\n# Define the split time\nsplit_time = 1000\n\n# Get the train set \ntime_train = time[:split_time]\nx_train = series[:split_time]\n\n# Get the validation set\ntime_valid = time[split_time:]\nx_valid = series[split_time:]\n```\n:::\n\n\n# Prepare Features and Labels\n\n::: {#1527bd08 .cell execution_count=5}\n``` {.python .cell-code}\n# Parameters\nwindow_size = 20\nbatch_size = 32\nshuffle_buffer_size = 1000\n```\n:::\n\n\n::: {#e497e497 .cell execution_count=6}\n``` {.python .cell-code}\ndef windowed_dataset(series, window_size, batch_size, shuffle_buffer):\n    \"\"\"Generates dataset windows\n\n    Args:\n      series (array of float) - contains the values of the time series\n      window_size (int) - the number of time steps to include in the feature\n      batch_size (int) - the batch size\n      shuffle_buffer(int) - buffer size to use for the shuffle method\n\n    Returns:\n      dataset (TF Dataset) - TF Dataset containing time windows\n    \"\"\"\n  \n    # Generate a TF Dataset from the series values\n    dataset = tf.data.Dataset.from_tensor_slices(series)\n    \n    # Window the data but only take those with the specified size\n    dataset = dataset.window(window_size + 1, shift=1, drop_remainder=True)\n    \n    # Flatten the windows by putting its elements in a single batch\n    dataset = dataset.flat_map(lambda window: window.batch(window_size + 1))\n\n    # Create tuples with features and labels \n    dataset = dataset.map(lambda window: (window[:-1], window[-1]))\n\n    # Shuffle the windows\n    dataset = dataset.shuffle(shuffle_buffer)\n    \n    # Create batches of windows\n    dataset = dataset.batch(batch_size).prefetch(1)\n    \n    return dataset\n```\n:::\n\n\n::: {#780a80e2 .cell execution_count=7}\n``` {.python .cell-code}\n# Generate the dataset windows\ndataset = windowed_dataset(x_train, window_size, batch_size, shuffle_buffer_size)\n```\n:::\n\n\n# define RNN model\n\n::: {#1aee712a .cell execution_count=8}\n``` {.python .cell-code}\n# Build the Model\nmodel_tune = tf.keras.models.Sequential([\n  tf.keras.layers.Lambda(lambda x: tf.expand_dims(x, axis=-1),\n                      input_shape=[window_size]),\n  tf.keras.layers.SimpleRNN(40, return_sequences=True),\n  tf.keras.layers.SimpleRNN(40),\n  tf.keras.layers.Dense(1),\n  tf.keras.layers.Lambda(lambda x: x * 100.0)\n])\n\n# Print the model summary\nmodel_tune.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ lambda (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ simple_rnn (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">SimpleRNN</span>)          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">40</span>)         │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,680</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ simple_rnn_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">SimpleRNN</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">40</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">3,240</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">41</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lambda_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,961</span> (19.38 KB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,961</span> (19.38 KB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n:::\n\n\nUsing Huber loss\n\n::: {#435be87c .cell execution_count=9}\n``` {.python .cell-code}\n# Set the learning rate scheduler\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(\n    lambda epoch: 1e-8 * 10**(epoch / 20))\n\n# Initialize the optimizer\noptimizer = tf.keras.optimizers.SGD(momentum=0.9)\n\n# Set the training parameters\nmodel_tune.compile(loss=tf.keras.losses.Huber(), optimizer=optimizer)\n\n# Train the model\nhistory = model_tune.fit(dataset, epochs=100, callbacks=[lr_schedule],verbose=0)\n```\n:::\n\n\n::: {#90ca3beb .cell execution_count=10}\n``` {.python .cell-code}\n# Define the learning rate array\nlrs = 1e-8 * (10 ** (np.arange(100) / 20))\n\n# Set the figure size\nplt.figure(figsize=(10, 6))\n\n# Set the grid\nplt.grid(True)\n\n# Plot the loss in log scale\nplt.semilogx(lrs, history.history[\"loss\"])\n\n# Increase the tickmarks size\nplt.tick_params('both', length=10, width=1, which='both')\n\n# Set the plot boundaries\nplt.axis([1e-8, 1e-3, 0, 50])\n```\n\n::: {.cell-output .cell-output-display}\n![](c4week3_files/figure-html/cell-11-output-1.png){width=814 height=500}\n:::\n:::\n\n\n::: {#8df76e61 .cell execution_count=11}\n``` {.python .cell-code}\n# Set the figure size\nplt.figure(figsize=(10, 6))\n\n# Set the grid\nplt.grid(True)\n\n# Plot the loss in log scale\nplt.semilogx(lrs, history.history[\"loss\"])\n\n# Increase the tickmarks size\nplt.tick_params('both', length=10, width=1, which='both')\n\n# Set the plot boundaries\nplt.axis([1e-7, 1e-4, 0, 20])\n```\n\n::: {.cell-output .cell-output-display}\n![](c4week3_files/figure-html/cell-12-output-1.png){width=827 height=500}\n:::\n:::\n\n\n# train model with tunned learning rate\n\n::: {#8c80b9c2 .cell execution_count=12}\n``` {.python .cell-code}\n# Build the model\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Lambda(lambda x: tf.expand_dims(x, axis=-1),\n                      input_shape=[window_size]),\n  tf.keras.layers.SimpleRNN(40, return_sequences=True),\n  tf.keras.layers.SimpleRNN(40),\n  tf.keras.layers.Dense(1),\n  tf.keras.layers.Lambda(lambda x: x * 100.0)\n])\n\n# Set the learning rate\nlearning_rate = 1e-6\n\n# Set the optimizer \noptimizer = tf.keras.optimizers.SGD(learning_rate=learning_rate, momentum=0.9)\n\n# Set the training parameters\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\n\n# Train the model\nhistory = model.fit(dataset,epochs=100,verbose=0)\n```\n:::\n\n\n# Model Prediction\n\n::: {#f14de595 .cell execution_count=13}\n``` {.python .cell-code}\n# Initialize a list\nforecast = []\n\n# Reduce the original series\nforecast_series = series[split_time - window_size:]\n\n# Use the model to predict data points per window size\nfor time in range(len(forecast_series) - window_size):\n  forecast.append(model.predict(forecast_series[time:time + window_size][np.newaxis]))\n\n# Convert to a numpy array and drop single dimensional axes\nresults = np.array(forecast).squeeze()\n\n# Plot the results\nplot_series(time_valid, (x_valid, results))\n```\n:::\n\n\n::: {#07f4e963 .cell execution_count=14}\n``` {.python .cell-code}\ndef model_forecast(model, series, window_size, batch_size):\n    \"\"\"Uses an input model to generate predictions on data windows\n\n    Args:\n      model (TF Keras Model) - model that accepts data windows\n      series (array of float) - contains the values of the time series\n      window_size (int) - the number of time steps to include in the window\n      batch_size (int) - the batch size\n\n    Returns:\n      forecast (numpy array) - array containing predictions\n    \"\"\"\n\n    # Generate a TF Dataset from the series values\n    dataset = tf.data.Dataset.from_tensor_slices(series)\n\n    # Window the data but only take those with the specified size\n    dataset = dataset.window(window_size, shift=1, drop_remainder=True)\n\n    # Flatten the windows by putting its elements in a single batch\n    dataset = dataset.flat_map(lambda w: w.batch(window_size))\n    \n    # Create batches of windows\n    dataset = dataset.batch(batch_size).prefetch(1)\n    \n    # Get predictions on the entire dataset\n    forecast = model.predict(dataset)\n    \n    return forecast\n```\n:::\n\n\n::: {#bb7b4eee .cell execution_count=15}\n``` {.python .cell-code}\n# Reduce the original series\nforecast_series = series[split_time - window_size:-1]\n\n# Use helper function to generate predictions\nforecast = model_forecast(model, forecast_series, window_size, batch_size)\n\n# Drop single dimensional axis\nresults = forecast.squeeze()\n\n# Plot the results\nplot_series(time_valid, (x_valid, results))\n```\n:::\n\n\n::: {#fd7d5102 .cell execution_count=16}\n``` {.python .cell-code}\n# Compute the MSE and MAE\nprint(tf.keras.metrics.mean_squared_error(x_valid, results).numpy())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n81.265686\n```\n:::\n:::\n\n\n::: {#88d7a005 .cell execution_count=17}\n``` {.python .cell-code}\nprint(tf.keras.metrics.mean_absolute_error(x_valid, results).numpy())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6.6564226\n```\n:::\n:::\n\n\n# define LSTM model\n\nclear\n\n::: {#ff937102 .cell execution_count=18}\n``` {.python .cell-code}\ntf.keras.backend.clear_session()\n```\n:::\n\n\n::: {#3f485366 .cell execution_count=19}\n``` {.python .cell-code}\n# Build the Model\nmodel_tune = tf.keras.models.Sequential([\n  tf.keras.layers.Lambda(lambda x: tf.expand_dims(x, axis=-1),\n                      input_shape=[window_size]),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32, return_sequences=True)),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32, return_sequences=True)),\n  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),\n  tf.keras.layers.Dense(1),\n  tf.keras.layers.Lambda(lambda x: x * 100.0)\n])\n\n# Print the model summary\nmodel_tune.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ lambda (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ bidirectional (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,704</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ bidirectional_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">24,832</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ bidirectional_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">24,832</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">65</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lambda_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">58,433</span> (228.25 KB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">58,433</span> (228.25 KB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n:::\n\n\n# Tune the Learning Rate\n\nusing Huber loss\n\n::: {#4f7b3b3e .cell execution_count=20}\n``` {.python .cell-code}\n# Set the learning rate scheduler\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(\n    lambda epoch: 1e-8 * 10**(epoch / 20))\n\n# Initialize the optimizer\noptimizer = tf.keras.optimizers.SGD(momentum=0.9)\n\n# Set the training parameters\nmodel_tune.compile(loss=tf.keras.losses.Huber(), optimizer=optimizer)\n\n# Train the model\nhistory = model_tune.fit(dataset, epochs=100, callbacks=[lr_schedule],verbose=0)\n```\n:::\n\n\n::: {#3f569cd6 .cell execution_count=21}\n``` {.python .cell-code}\n# Define the learning rate array\nlrs = 1e-8 * (10 ** (np.arange(100) / 20))\n\n# Set the figure size\nplt.figure(figsize=(10, 6))\n\n# Set the grid\nplt.grid(True)\n\n# Plot the loss in log scale\nplt.semilogx(lrs, history.history[\"loss\"])\n\n# Increase the tickmarks size\nplt.tick_params('both', length=10, width=1, which='both')\n\n# Set the plot boundaries\nplt.axis([1e-8, 1e-3, 0, 30])\n```\n\n::: {.cell-output .cell-output-display}\n![](c4week3_files/figure-html/cell-22-output-1.png){width=814 height=500}\n:::\n:::\n\n\n# train model with tunned learning rate\n\n::: {#7c2bbce9 .cell execution_count=22}\n``` {.python .cell-code}\n# Reset states generated by Keras\ntf.keras.backend.clear_session()\n\n# Build the model\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Lambda(lambda x: tf.expand_dims(x, axis=-1),\n                      input_shape=[None]),\n   tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32, return_sequences=True)),\n  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),\n  tf.keras.layers.Dense(1),\n  tf.keras.layers.Lambda(lambda x: x * 100.0)\n])\n\n# compile\n\n# Set the learning rate\nlearning_rate = 2e-6\n\n# Set the optimizer \noptimizer = tf.keras.optimizers.SGD(learning_rate=learning_rate, momentum=0.9)\n\n# Set the training parameters\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\n\n# Train\n# Train the model\nhistory = model.fit(dataset,epochs=100,verbose=0)\n```\n:::\n\n\n# Model Prediction\n\n::: {#3d7ab51e .cell execution_count=23}\n``` {.python .cell-code}\ndef model_forecast(model, series, window_size, batch_size):\n    \"\"\"Uses an input model to generate predictions on data windows\n\n    Args:\n      model (TF Keras Model) - model that accepts data windows\n      series (array of float) - contains the values of the time series\n      window_size (int) - the number of time steps to include in the window\n      batch_size (int) - the batch size\n\n    Returns:\n      forecast (numpy array) - array containing predictions\n    \"\"\"\n\n    # Generate a TF Dataset from the series values\n    dataset = tf.data.Dataset.from_tensor_slices(series)\n\n    # Window the data but only take those with the specified size\n    dataset = dataset.window(window_size, shift=1, drop_remainder=True)\n\n    # Flatten the windows by putting its elements in a single batch\n    dataset = dataset.flat_map(lambda w: w.batch(window_size))\n    \n    # Create batches of windows\n    dataset = dataset.batch(batch_size).prefetch(1)\n    \n    # Get predictions on the entire dataset\n    forecast = model.predict(dataset)\n    \n    return forecast\n```\n:::\n\n\n::: {#84e787d9 .cell execution_count=24}\n``` {.python .cell-code}\n# Reduce the original series\nforecast_series = series[split_time-window_size:-1]\n\n# Use helper function to generate predictions\nforecast = model_forecast(model, forecast_series, window_size, batch_size)\n\n# Drop single dimensional axis\nresults = forecast.squeeze()\n\n# Plot the results\nplot_series(time_valid, (x_valid, results))\n```\n:::\n\n\n::: {#15c4cfca .cell execution_count=25}\n``` {.python .cell-code}\n# Compute the MSE and MAE\nprint(tf.keras.metrics.mean_squared_error(x_valid, results).numpy())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n74.571434\n```\n:::\n:::\n\n\n::: {#b6cccd49 .cell execution_count=26}\n``` {.python .cell-code}\nprint(tf.keras.metrics.mean_absolute_error(x_valid, results).numpy())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6.1871777\n```\n:::\n:::\n\n\n# \n\n# resource:\n\nhttps://www.coursera.org/learn/tensorflow-sequences-time-series-and-prediction\n\nhttps://github.com/https-deeplearning-ai/tensorflow-1-public/tree/main/C4\n\n",
    "supporting": [
      "c4week3_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}