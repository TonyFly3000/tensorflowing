{
  "hash": "821bec7ef05d994fbdf68dd34c60414d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"W4:Real-world time series data sunspots\"\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\nWeek 4 sunspots data\n\n::: {#e07a431f .cell execution_count=1}\n``` {.python .cell-code}\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n# download data\n\n::: {#c0a5fc99 .cell execution_count=2}\n``` {.python .cell-code}\nimport urllib.request\n\nurl=\"https://storage.googleapis.com/tensorflow-1-public/course4/Sunspots.csv\"\n\nurllib.request.urlretrieve(url, \"Sunspots.csv\")\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n('Sunspots.csv', <http.client.HTTPMessage at 0x291fef150>)\n```\n:::\n:::\n\n\n::: {#718f2b04 .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\ndef plot_series(x, y, format=\"-\", start=0, end=None, \n                title=None, xlabel=None, ylabel=None, legend=None ):\n    \"\"\"\n    Visualizes time series data\n\n    Args:\n      x (array of int) - contains values for the x-axis\n      y (array of int or tuple of arrays) - contains the values for the y-axis\n      format (string) - line style when plotting the graph\n      label (string) - tag for the line\n      start (int) - first time step to plot\n      end (int) - last time step to plot\n      title (string) - title of the plot\n      xlabel (string) - label for the x-axis\n      ylabel (string) - label for the y-axis\n      legend (list of strings) - legend for the plot\n    \"\"\"\n\n    # Setup dimensions of the graph figure\n    plt.figure(figsize=(10, 6))\n    \n    # Check if there are more than two series to plot\n    if type(y) is tuple:\n\n      # Loop over the y elements\n      for y_curr in y:\n\n        # Plot the x and current y values\n        plt.plot(x[start:end], y_curr[start:end], format)\n\n    else:\n      # Plot the x and y values\n      plt.plot(x[start:end], y[start:end], format)\n\n    # Label the x-axis\n    plt.xlabel(xlabel)\n\n    # Label the y-axis\n    plt.ylabel(ylabel)\n\n    # Set the legend\n    if legend:\n      plt.legend(legend)\n\n    # Set the title\n    plt.title(title)\n\n    # Overlay a grid on the graph\n    plt.grid(True)\n\n    # Draw the graph on screen\n    plt.show()\n```\n:::\n\n\n# read in data\n\n::: {#b975ceb5 .cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\ndata=pd.read_csv('./Sunspots.csv')\ndata.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>Date</th>\n      <th>Monthly Mean Total Sunspot Number</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1749-01-31</td>\n      <td>96.7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1749-02-28</td>\n      <td>104.3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>1749-03-31</td>\n      <td>116.7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>1749-04-30</td>\n      <td>92.8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>1749-05-31</td>\n      <td>141.7</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#b46f7a9e .cell execution_count=5}\n``` {.python .cell-code}\nlist(data)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n['Unnamed: 0', 'Date', 'Monthly Mean Total Sunspot Number']\n```\n:::\n:::\n\n\n::: {#9f7f04ad .cell execution_count=6}\n``` {.python .cell-code}\ntime=data['Unnamed: 0'].to_numpy()\n```\n:::\n\n\n::: {#7dcf76a8 .cell execution_count=7}\n``` {.python .cell-code}\nseries=data[\"Monthly Mean Total Sunspot Number\"].to_numpy()\n```\n:::\n\n\n# plot data\n\n::: {#59694545 .cell execution_count=8}\n``` {.python .cell-code}\n# Preview the data\nplot_series(time, series, xlabel='Month', ylabel='Monthly Mean Total Sunspot Number')\n```\n\n::: {.cell-output .cell-output-display}\n![](c4week4 Sunspots_files/figure-html/cell-9-output-1.png){width=816 height=503}\n:::\n:::\n\n\n# Split the Dataset\n\n::: {#4433bc87 .cell execution_count=9}\n``` {.python .cell-code}\n# Define the split time\nsplit_time = 3000\n\n# Get the train set \ntime_train = time[:split_time]\nx_train = series[:split_time]\n\n# Get the validation set\ntime_valid = time[split_time:]\nx_valid = series[split_time:]\n```\n:::\n\n\n# Prepare Features and Labels\n\n::: {#d9c20693 .cell execution_count=10}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\ndef windowed_dataset(series, window_size, batch_size, shuffle_buffer):\n    \"\"\"Generates dataset windows\n\n    Args:\n      series (array of float) - contains the values of the time series\n      window_size (int) - the number of time steps to include in the feature\n      batch_size (int) - the batch size\n      shuffle_buffer(int) - buffer size to use for the shuffle method\n\n    Returns:\n      dataset (TF Dataset) - TF Dataset containing time windows\n    \"\"\"\n  \n    # Generate a TF Dataset from the series values\n    dataset = tf.data.Dataset.from_tensor_slices(series)\n    \n    # Window the data but only take those with the specified size\n    dataset = dataset.window(window_size + 1, shift=1, drop_remainder=True)\n    \n    # Flatten the windows by putting its elements in a single batch\n    dataset = dataset.flat_map(lambda window: window.batch(window_size + 1))\n\n    # Create tuples with features and labels \n    dataset = dataset.map(lambda window: (window[:-1], window[-1]))\n\n    # Shuffle the windows\n    dataset = dataset.shuffle(shuffle_buffer)\n    \n    # Create batches of windows\n    dataset = dataset.batch(batch_size).prefetch(1)\n    \n    return dataset\n```\n:::\n\n\n::: {#2e6a213e .cell execution_count=11}\n``` {.python .cell-code}\n# Parameters\nwindow_size = 30\nbatch_size = 32\nshuffle_buffer_size = 1000\n\n# Generate the dataset windows\ntrain_set = windowed_dataset(x_train, window_size, batch_size, shuffle_buffer_size)\n```\n:::\n\n\n# DNN model\n\n## define DNN Model\n\n::: {#2a7ecf96 .cell execution_count=12}\n``` {.python .cell-code}\n# Reset states generated by Keras\ntf.keras.backend.clear_session()\n\n\n# Build the model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(30, input_shape=[window_size], activation=\"relu\"), \n    tf.keras.layers.Dense(10, activation=\"relu\"),\n    tf.keras.layers.Dense(1)\n])\n\n# Print the model summary\nmodel.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">930</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">310</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,251</span> (4.89 KB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,251</span> (4.89 KB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n:::\n\n\n## Tune the Learning Rate\n\n::: {#ba8b3d57 .cell execution_count=13}\n``` {.python .cell-code}\n# Set the learning rate scheduler\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(\n    lambda epoch: 1e-8 * 10**(epoch / 20))\n\n# Initialize the optimizer\noptimizer = tf.keras.optimizers.SGD(momentum=0.9)\n\n# Set the training parameters\nmodel.compile(loss=tf.keras.losses.Huber(), optimizer=optimizer)\n\n# Train the model\nhistory = model.fit(train_set, epochs=100, callbacks=[lr_schedule],verbose=0)\n```\n:::\n\n\n::: {#05edf0f6 .cell execution_count=14}\n``` {.python .cell-code}\n# Define the learning rate array\nlrs = 1e-8 * (10 ** (np.arange(100) / 20))\n\n# Set the figure size\nplt.figure(figsize=(10, 6))\n\n# Set the grid\nplt.grid(True)\n\n# Plot the loss in log scale\nplt.semilogx(lrs, history.history[\"loss\"])\n\n# Increase the tickmarks size\nplt.tick_params('both', length=10, width=1, which='both')\n\n# Set the plot boundaries\nplt.axis([1e-8, 1e-3, 0, 100])\n```\n\n::: {.cell-output .cell-output-display}\n![](c4week4 Sunspots_files/figure-html/cell-15-output-1.png){width=822 height=500}\n:::\n:::\n\n\n## define DNN Model after tunned\n\n::: {#ddab6d79 .cell execution_count=15}\n``` {.python .cell-code}\n# Reset states generated by Keras\ntf.keras.backend.clear_session()\n\n# Build the Model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(30, input_shape=[window_size], activation=\"relu\"), \n    tf.keras.layers.Dense(10, activation=\"relu\"),\n    tf.keras.layers.Dense(1)\n])\n```\n:::\n\n\n## complie model\n\n::: {#010bdfd4 .cell execution_count=16}\n``` {.python .cell-code}\n# Set the learning rate\nlearning_rate = 2e-5\n\n# Set the optimizer \noptimizer = tf.keras.optimizers.SGD(learning_rate=learning_rate, momentum=0.9)\n\n# Set the training parameters\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\n```\n:::\n\n\n## train DNN Model after tunned\n\n::: {#02ab9f35 .cell execution_count=17}\n``` {.python .cell-code}\n# Train the model\nhistory = model.fit(train_set,epochs=100,verbose=0)\n```\n:::\n\n\n## Model Prediction\n\n::: {#16889684 .cell execution_count=18}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\ndef model_forecast(model, series, window_size, batch_size):\n    \"\"\"Uses an input model to generate predictions on data windows\n\n    Args:\n      model (TF Keras Model) - model that accepts data windows\n      series (array of float) - contains the values of the time series\n      window_size (int) - the number of time steps to include in the window\n      batch_size (int) - the batch size\n\n    Returns:\n      forecast (numpy array) - array containing predictions\n    \"\"\"\n\n    # Generate a TF Dataset from the series values\n    dataset = tf.data.Dataset.from_tensor_slices(series)\n\n    # Window the data but only take those with the specified size\n    dataset = dataset.window(window_size, shift=1, drop_remainder=True)\n\n    # Flatten the windows by putting its elements in a single batch\n    dataset = dataset.flat_map(lambda w: w.batch(window_size))\n    \n    # Create batches of windows\n    dataset = dataset.batch(batch_size).prefetch(1)\n    \n    # Get predictions on the entire dataset\n    forecast = model.predict(dataset)\n    \n    return forecast\n```\n:::\n\n\nforcast one value\n\n::: {#19cf8497 .cell execution_count=19}\n``` {.python .cell-code}\nforecast_series = series[split_time:split_time+window_size]\nforecast = model_forecast(model, forecast_series, window_size, batch_size)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r      1/Unknown 0s 18ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 19ms/step\n```\n:::\n:::\n\n\n::: {#98b8fdf8 .cell execution_count=20}\n``` {.python .cell-code}\nresults = forecast.squeeze()\nresults\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\narray(176.29543, dtype=float32)\n```\n:::\n:::\n\n\n::: {#359c201b .cell execution_count=21}\n``` {.python .cell-code}\n# Reduce the original series\nforecast_series = series[split_time-window_size:-1]\n\n# Use helper function to generate predictions\nforecast = model_forecast(model, forecast_series, window_size, batch_size)\n\n# Drop single dimensional axis\nresults = forecast.squeeze()\n\n# Plot the results\nplot_series(time_valid, (x_valid, results))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:5 out of the last 18 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x2a1cdb060> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n\r      1/Unknown 0s 19ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r8/8 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](c4week4 Sunspots_files/figure-html/cell-22-output-2.png){width=798 height=485}\n:::\n:::\n\n\n## model result\n\n::: {#8554aa6d .cell execution_count=22}\n``` {.python .cell-code}\n## Compute the MAE and MSE\nprint(tf.keras.metrics.mean_squared_error(x_valid, results).numpy())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n464.83243\n```\n:::\n:::\n\n\n::: {#63b31cc3 .cell execution_count=23}\n``` {.python .cell-code}\nprint(tf.keras.metrics.mean_absolute_error(x_valid, results).numpy())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n15.030133\n```\n:::\n:::\n\n\n# RNN model\n\n\n## define RNN Model\n\n::: {#0c7f67a8 .cell execution_count=24}\n``` {.python .cell-code}\n# Build the Model\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv1D(filters=64, kernel_size=3,\n                      strides=1,\n                      activation=\"relu\",\n                      padding='causal',\n                      input_shape=[window_size, 1]),\n  tf.keras.layers.LSTM(64, return_sequences=True),\n  tf.keras.layers.LSTM(64),\n  tf.keras.layers.Dense(30, activation=\"relu\"),\n  tf.keras.layers.Dense(10, activation=\"relu\"),\n  tf.keras.layers.Dense(1),\n  tf.keras.layers.Lambda(lambda x: x * 400)\n])\n\n # Print the model summary \nmodel.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv1d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv1D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">33,024</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">33,024</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,950</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">310</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lambda (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">68,575</span> (267.87 KB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">68,575</span> (267.87 KB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n:::\n\n\n## Tune the Learning Rate\n\n::: {#4ba1a808 .cell execution_count=25}\n``` {.python .cell-code}\n# Get initial weights\ninit_weights = model.get_weights()\n```\n:::\n\n\n::: {#20a90b26 .cell execution_count=26}\n``` {.python .cell-code}\n# Set the learning rate scheduler\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(\n    lambda epoch: 1e-8 * 10**(epoch / 20))\n\n# Initialize the optimizer\noptimizer = tf.keras.optimizers.SGD(momentum=0.9)\n\n# Set the training parameters\nmodel.compile(loss=tf.keras.losses.Huber(), optimizer=optimizer)\n\n# Train the model\nhistory = model.fit(train_set, epochs=100, callbacks=[lr_schedule],verbose=0)\n```\n:::\n\n\n::: {#8c4da35e .cell execution_count=27}\n``` {.python .cell-code}\n# Define the learning rate array\nlrs = 1e-8 * (10 ** (np.arange(100) / 20))\n\n# Set the figure size\nplt.figure(figsize=(10, 6))\n\n# Set the grid\nplt.grid(True)\n\n# Plot the loss in log scale\nplt.semilogx(lrs, history.history[\"loss\"])\n\n# Increase the tickmarks size\nplt.tick_params('both', length=10, width=1, which='both')\n\n# Set the plot boundaries\nplt.axis([1e-8, 1e-3, 0, 100])\n```\n\n::: {.cell-output .cell-output-display}\n![](c4week4 Sunspots_files/figure-html/cell-28-output-1.png){width=822 height=500}\n:::\n:::\n\n\n## define RNN model after tunned\n\n::: {#055cce4a .cell execution_count=28}\n``` {.python .cell-code}\n# Reset states generated by Keras\ntf.keras.backend.clear_session()\n\n# Reset the weights\nmodel.set_weights(init_weights)\n```\n:::\n\n\n::: {#9f414cb8 .cell execution_count=29}\n``` {.python .cell-code}\nmodel.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv1d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv1D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">33,024</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">33,024</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,950</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">310</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lambda (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">137,152</span> (535.75 KB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">68,575</span> (267.87 KB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">68,577</span> (267.88 KB)\n</pre>\n```\n:::\n:::\n\n\n## complie model\n\n::: {#5154d83a .cell execution_count=30}\n``` {.python .cell-code}\n# Set the learning rate\nlearning_rate = 8e-7\n\n# Set the optimizer \noptimizer = tf.keras.optimizers.SGD(learning_rate=learning_rate, momentum=0.9)\n\n# Set the training parameters\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\n```\n:::\n\n\n## train RNN Model after tunned\n\n::: {#0530dad0 .cell execution_count=31}\n``` {.python .cell-code}\n# Train the model\nhistory = model.fit(train_set,epochs=100,verbose=0)\n```\n:::\n\n\n::: {#354d958a .cell execution_count=32}\n``` {.python .cell-code}\n# Get mae and loss from history log\nmae=history.history['mae']\nloss=history.history['loss']\n\n# Get number of epochs\nepochs=range(len(loss)) \n\n# Plot mae and loss\nplot_series(\n    x=epochs, \n    y=(mae, loss), \n    title='MAE and Loss', \n    xlabel='MAE',\n    ylabel='Loss',\n    legend=['MAE', 'Loss']\n    )\n\n# Only plot the last 80% of the epochs\nzoom_split = int(epochs[-1] * 0.2)\nepochs_zoom = epochs[zoom_split:]\nmae_zoom = mae[zoom_split:]\nloss_zoom = loss[zoom_split:]\n\n# Plot zoomed mae and loss\nplot_series(\n    x=epochs_zoom, \n    y=(mae_zoom, loss_zoom), \n    title='MAE and Loss', \n    xlabel='MAE',\n    ylabel='Loss',\n    legend=['MAE', 'Loss']\n    )\n```\n\n::: {.cell-output .cell-output-display}\n![](c4week4 Sunspots_files/figure-html/cell-33-output-1.png){width=808 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](c4week4 Sunspots_files/figure-html/cell-33-output-2.png){width=829 height=523}\n:::\n:::\n\n\n## Model Prediction\n\n::: {#2f4e7ca2 .cell execution_count=33}\n``` {.python .cell-code}\n# Reduce the original series\nforecast_series = series[split_time-window_size:-1]\n\n# Use helper function to generate predictions\nforecast = model_forecast(model, forecast_series, window_size, batch_size)\n\n# Drop single dimensional axis\nresults = forecast.squeeze()\n\n# Plot the results\nplot_series(time_valid, (x_valid, results))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r      1/Unknown 0s 153ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r      8/Unknown 0s 23ms/step \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r8/8 ━━━━━━━━━━━━━━━━━━━━ 0s 24ms/step\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](c4week4 Sunspots_files/figure-html/cell-34-output-2.png){width=798 height=485}\n:::\n:::\n\n\n## model result\n\n::: {#928301e3 .cell execution_count=34}\n``` {.python .cell-code}\n## Compute the MAE and MSE\nprint(tf.keras.metrics.mean_squared_error(x_valid, results).numpy())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n419.6377\n```\n:::\n:::\n\n\n::: {#9db5cb7f .cell execution_count=35}\n``` {.python .cell-code}\nprint(tf.keras.metrics.mean_absolute_error(x_valid, results).numpy())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14.465482\n```\n:::\n:::\n\n\n# resource:\n\nhttps://www.coursera.org/learn/tensorflow-sequences-time-series-and-prediction\n\nhttps://github.com/https-deeplearning-ai/tensorflow-1-public/tree/main/C4\n\n",
    "supporting": [
      "c4week4 Sunspots_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}