{
  "hash": "7ece0dc291d26ccbad3025b85a30d1ed",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"W4:Sequence models and literature\"\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\nWeek4 Sequence models and literature\n\nTaking everything that you've learned in training a neural network based on NLP, we thought it might be a bit of fun to turn the tables away from classification and use your knowledge for prediction. Given a body of words, you could conceivably predict the word most likely to follow a given word or phrase, and once you've done that, to do it again, and again. With that in mind, this week you'll build a poetry generator. It's trained with the lyrics from traditional Irish songs, and can be used to produce beautiful-sounding verse of it's own!\n\nLong short-term memory (LSTM) is a type of recurrent neural network (RNN)\n\n::: {#771380d5 .cell execution_count=1}\n``` {.python .cell-code}\nimport tensorflow as tf\nimport numpy as np \nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n```\n:::\n\n\n# input data\n\n::: {#1156b06b .cell execution_count=2}\n``` {.python .cell-code}\n# Define the lyrics of the song\ndata=\"In the town of Athy one Jeremy Lanigan \\n Battered away til he hadnt a pound. \\nHis father died and made him a man again \\n Left him a farm and ten acres of ground. \\nHe gave a grand party for friends and relations \\nWho didnt forget him when come to the wall, \\nAnd if youll but listen Ill make your eyes glisten \\nOf the rows and the ructions of Lanigans Ball. \\nMyself to be sure got free invitation, \\nFor all the nice girls and boys I might ask, \\nAnd just in a minute both friends and relations \\nWere dancing round merry as bees round a cask. \\nJudy ODaly, that nice little milliner, \\nShe tipped me a wink for to give her a call, \\nAnd I soon arrived with Peggy McGilligan \\nJust in time for Lanigans Ball. \\nThere were lashings of punch and wine for the ladies, \\nPotatoes and cakes; there was bacon and tea, \\nThere were the Nolans, Dolans, OGradys \\nCourting the girls and dancing away. \\nSongs they went round as plenty as water, \\nThe harp that once sounded in Taras old hall,\\nSweet Nelly Gray and The Rat Catchers Daughter,\\nAll singing together at Lanigans Ball. \\nThey were doing all kinds of nonsensical polkas \\nAll round the room in a whirligig. \\nJulia and I, we banished their nonsense \\nAnd tipped them the twist of a reel and a jig. \\nAch mavrone, how the girls got all mad at me \\nDanced til youd think the ceiling would fall. \\nFor I spent three weeks at Brooks Academy \\nLearning new steps for Lanigans Ball. \\nThree long weeks I spent up in Dublin, \\nThree long weeks to learn nothing at all,\\n Three long weeks I spent up in Dublin, \\nLearning new steps for Lanigans Ball. \\nShe stepped out and I stepped in again, \\nI stepped out and she stepped in again, \\nShe stepped out and I stepped in again, \\nLearning new steps for Lanigans Ball. \\nBoys were all merry and the girls they were hearty \\nAnd danced all around in couples and groups, \\nTil an accident happened, young Terrance McCarthy \\nPut his right leg through miss Finnertys hoops. \\nPoor creature fainted and cried Meelia murther, \\nCalled for her brothers and gathered them all. \\nCarmody swore that hed go no further \\nTil he had satisfaction at Lanigans Ball. \\nIn the midst of the row miss Kerrigan fainted, \\nHer cheeks at the same time as red as a rose. \\nSome of the lads declared she was painted, \\nShe took a small drop too much, I suppose. \\nHer sweetheart, Ned Morgan, so powerful and able, \\nWhen he saw his fair colleen stretched out by the wall, \\nTore the left leg from under the table \\nAnd smashed all the Chaneys at Lanigans Ball. \\nBoys, oh boys, twas then there were runctions. \\nMyself got a lick from big Phelim McHugh. \\nI soon replied to his introduction \\nAnd kicked up a terrible hullabaloo. \\nOld Casey, the piper, was near being strangled. \\nThey squeezed up his pipes, bellows, chanters and all. \\nThe girls, in their ribbons, they got all entangled \\nAnd that put an end to Lanigans Ball.\"\n\n# Split the long string per line and put in a list\ncorpus = data.lower().split(\"\\n\")\n```\n:::\n\n\nonly have total 64 lines of words\n\n::: {#c0a0201d .cell execution_count=3}\n``` {.python .cell-code}\nlen(corpus)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n64\n```\n:::\n:::\n\n\n::: {#05fb9ba2 .cell execution_count=4}\n``` {.python .cell-code}\n# Preview the result\nprint(corpus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['in the town of athy one jeremy lanigan ', ' battered away til he hadnt a pound. ', 'his father died and made him a man again ', ' left him a farm and ten acres of ground. ', 'he gave a grand party for friends and relations ', 'who didnt forget him when come to the wall, ', 'and if youll but listen ill make your eyes glisten ', 'of the rows and the ructions of lanigans ball. ', 'myself to be sure got free invitation, ', 'for all the nice girls and boys i might ask, ', 'and just in a minute both friends and relations ', 'were dancing round merry as bees round a cask. ', 'judy odaly, that nice little milliner, ', 'she tipped me a wink for to give her a call, ', 'and i soon arrived with peggy mcgilligan ', 'just in time for lanigans ball. ', 'there were lashings of punch and wine for the ladies, ', 'potatoes and cakes; there was bacon and tea, ', 'there were the nolans, dolans, ogradys ', 'courting the girls and dancing away. ', 'songs they went round as plenty as water, ', 'the harp that once sounded in taras old hall,', 'sweet nelly gray and the rat catchers daughter,', 'all singing together at lanigans ball. ', 'they were doing all kinds of nonsensical polkas ', 'all round the room in a whirligig. ', 'julia and i, we banished their nonsense ', 'and tipped them the twist of a reel and a jig. ', 'ach mavrone, how the girls got all mad at me ', 'danced til youd think the ceiling would fall. ', 'for i spent three weeks at brooks academy ', 'learning new steps for lanigans ball. ', 'three long weeks i spent up in dublin, ', 'three long weeks to learn nothing at all,', ' three long weeks i spent up in dublin, ', 'learning new steps for lanigans ball. ', 'she stepped out and i stepped in again, ', 'i stepped out and she stepped in again, ', 'she stepped out and i stepped in again, ', 'learning new steps for lanigans ball. ', 'boys were all merry and the girls they were hearty ', 'and danced all around in couples and groups, ', 'til an accident happened, young terrance mccarthy ', 'put his right leg through miss finnertys hoops. ', 'poor creature fainted and cried meelia murther, ', 'called for her brothers and gathered them all. ', 'carmody swore that hed go no further ', 'til he had satisfaction at lanigans ball. ', 'in the midst of the row miss kerrigan fainted, ', 'her cheeks at the same time as red as a rose. ', 'some of the lads declared she was painted, ', 'she took a small drop too much, i suppose. ', 'her sweetheart, ned morgan, so powerful and able, ', 'when he saw his fair colleen stretched out by the wall, ', 'tore the left leg from under the table ', 'and smashed all the chaneys at lanigans ball. ', 'boys, oh boys, twas then there were runctions. ', 'myself got a lick from big phelim mchugh. ', 'i soon replied to his introduction ', 'and kicked up a terrible hullabaloo. ', 'old casey, the piper, was near being strangled. ', 'they squeezed up his pipes, bellows, chanters and all. ', 'the girls, in their ribbons, they got all entangled ', 'and that put an end to lanigans ball.']\n```\n:::\n:::\n\n\n::: {#7fedd4f0 .cell execution_count=5}\n``` {.python .cell-code}\n# Initialize the Tokenizer class\ntokenizer = Tokenizer()\n\n# Generate the word index dictionary\ntokenizer.fit_on_texts(corpus)\n\n# Define the total words. You add 1 for the index `0` which is just the padding token.\ntotal_words = len(tokenizer.word_index) + 1\n\n#print(f'word index dictionary: {tokenizer.word_index}')\n```\n:::\n\n\nonly have total 263 unique words\n\n::: {#6cf0da13 .cell execution_count=6}\n``` {.python .cell-code}\nprint(f'total words: {total_words}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal words: 263\n```\n:::\n:::\n\n\n# Preprocessing the Dataset\n\nNext, you will be generating the training sequences and their labels. As discussed in the lectures, you will take each line of the song and generate inputs and labels from it. For example, if you only have one sentence: \"I am using Tensorflow\", you want the model to learn the next word given any subphrase of this sentence:\n\n## INPUT LABEL\n\nI ---\\> am I am ---\\> using I am using ---\\> Tensorflow\n\n![](images/Screenshot 2024-04-28 at 16.22.37.png)\n\n::: {#db163f58 .cell execution_count=7}\n``` {.python .cell-code}\n# Initialize the sequences list\ninput_sequences = []\n\n# Loop over every line\nfor line in corpus:\n\n\t# Tokenize the current line\n\ttoken_list = tokenizer.texts_to_sequences([line])[0]\n\n\t# Loop over the line several times to generate the subphrases\n\tfor i in range(1, len(token_list)):\n\t\t\n\t\t# Generate the subphrase\n\t\tn_gram_sequence = token_list[:i+1]\n\n\t\t# Append the subphrase to the sequences list\n\t\tinput_sequences.append(n_gram_sequence)\n\n# Get the length of the longest line\nmax_sequence_len = max([len(x) for x in input_sequences])\nmax_sequence_len\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n11\n```\n:::\n:::\n\n\n::: {#337a2e92 .cell execution_count=8}\n``` {.python .cell-code}\n# Pad all sequences\ninput_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))\n\n# Create inputs and label by splitting the last token in the subphrases\nxs, labels = input_sequences[:,:-1],input_sequences[:,-1]\n\n# Convert the label into one-hot arrays\nys = tf.keras.utils.to_categorical(labels, num_classes=total_words)\n```\n:::\n\n\nfirst sentence\n\n::: {#9e05e0f7 .cell execution_count=9}\n``` {.python .cell-code}\n# Get sample sentence\nsentence = corpus[0].split()\nprint(f'sample sentence: {sentence}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsample sentence: ['in', 'the', 'town', 'of', 'athy', 'one', 'jeremy', 'lanigan']\n```\n:::\n:::\n\n\nfirst sentence after tokenizer\n\n::: {#0c9596e0 .cell execution_count=10}\n``` {.python .cell-code}\n# Initialize token list\ntoken_list = []\n\n# Look up the indices of each word and append to the list\nfor word in sentence: \n  token_list.append(tokenizer.word_index[word])\n\n# Print the token list\nprint(token_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[4, 2, 66, 8, 67, 68, 69, 70]\n```\n:::\n:::\n\n\n::: {#db3e2376 .cell execution_count=11}\n``` {.python .cell-code}\nprint(xs[5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 0  0  0  0  4  2 66  8 67 68]\n```\n:::\n:::\n\n\n::: {#44ad87fb .cell execution_count=12}\n``` {.python .cell-code}\nprint(ys[5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n```\n:::\n:::\n\n\n::: {#9bf2a7a1 .cell execution_count=13}\n``` {.python .cell-code}\n# Pick element\nelem_number = 6\n\n# Print token list and phrase\nprint(f'token list: {xs[elem_number]}')\nprint(f'decoded to text: {tokenizer.sequences_to_texts([xs[elem_number]])}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntoken list: [ 0  0  0  4  2 66  8 67 68 69]\ndecoded to text: ['in the town of athy one jeremy']\n```\n:::\n:::\n\n\n::: {#0b175a63 .cell execution_count=14}\n``` {.python .cell-code}\n# Print label\nprint(f'one-hot label: {ys[elem_number]}')\nprint(f'index of label: {np.argmax(ys[elem_number])}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\none-hot label: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\nindex of label: 70\n```\n:::\n:::\n\n\n::: {#7850cfbf .cell execution_count=15}\n``` {.python .cell-code}\n# Pick element\nelem_number = 5\n\n# Print token list and phrase\nprint(f'token list: {xs[elem_number]}')\nprint(f'decoded to text: {tokenizer.sequences_to_texts([xs[elem_number]])}')\n\n# Print label\nprint(f'one-hot label: {ys[elem_number]}')\nprint(f'index of label: {np.argmax(ys[elem_number])}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntoken list: [ 0  0  0  0  4  2 66  8 67 68]\ndecoded to text: ['in the town of athy one']\none-hot label: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\nindex of label: 69\n```\n:::\n:::\n\n\n# Build the Model\n\n## define model\n\n::: {#797c9e22 .cell execution_count=16}\n``` {.python .cell-code}\n# Build the model\nmodel = Sequential([\n          Embedding(total_words, 64),\n          Bidirectional(LSTM(20)),\n          Dense(total_words, activation='softmax')\n])\n```\n:::\n\n\n## compile model\n\n::: {#4f6f5ed8 .cell execution_count=17}\n``` {.python .cell-code}\n# Use categorical crossentropy because this is a multi-class problem\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Print the model summary\nmodel.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ bidirectional (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n:::\n\n\n## train model\n\n::: {#20adb9f8 .cell execution_count=18}\n``` {.python .cell-code}\n# Train the model\nhistory = model.fit(xs, ys, epochs=500,verbose=0)\n```\n:::\n\n\n## model performance:\n\n::: {#15e97cc8 .cell execution_count=19}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Plot utility\ndef plot_graphs(history, string):\n  plt.plot(history.history[string])\n  plt.xlabel(\"Epochs\")\n  plt.ylabel(string)\n  plt.show()\n\n# Visualize the accuracy\nplot_graphs(history, 'accuracy')\n```\n\n::: {.cell-output .cell-output-display}\n![](c3week4_files/figure-html/cell-20-output-1.png){width=589 height=434}\n:::\n:::\n\n\n# Generating next word\n\n::: {#da885a99 .cell execution_count=20}\n``` {.python .cell-code}\nseed_text = \"Laurence went to Dublin\"\n\ntoken_list = tokenizer.texts_to_sequences([seed_text])[0]\ntoken_list\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n[134, 13, 59]\n```\n:::\n:::\n\n\n::: {#4a0b5974 .cell execution_count=21}\n``` {.python .cell-code}\ntoken_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\ntoken_list\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\narray([[  0,   0,   0,   0,   0,   0,   0, 134,  13,  59]], dtype=int32)\n```\n:::\n:::\n\n\n::: {#0c90a1e7 .cell execution_count=22}\n``` {.python .cell-code}\nprobabilities = model.predict(token_list)\n\npredicted = np.argmax(probabilities, axis=-1)[0]\npredicted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 141ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 141ms/step\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n26\n```\n:::\n:::\n\n\n::: {#b553c4f5 .cell execution_count=23}\n``` {.python .cell-code}\noutput_word = tokenizer.index_word[predicted]\noutput_word\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n'that'\n```\n:::\n:::\n\n\n# Generating next 100 Text\n\n::: {#8c88f9a8 .cell execution_count=24}\n``` {.python .cell-code}\n# Define seed text\nseed_text = \"Laurence went to Dublin\"\n\n# Define total words to predict\nnext_words = 100\n\n# Loop until desired length is reached\nfor _ in range(next_words):\n\n\t# Convert the seed text to a token sequence\n\ttoken_list = tokenizer.texts_to_sequences([seed_text])[0]\n\n\t# Pad the sequence\n\ttoken_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n\t\n\t# Feed to the model and get the probabilities for each index\n\tprobabilities = model.predict(token_list)\n\n\t# Get the index with the highest probability\n\tpredicted = np.argmax(probabilities, axis=-1)[0]\n\n\t# Ignore if index is 0 because that is just the padding.\n\tif predicted != 0:\n\t\t\n\t\t# Look up the word associated with the index. \n\t\toutput_word = tokenizer.index_word[predicted]\n\n\t\t# Combine with the seed text\n\t\tseed_text += \" \" + output_word\n\n# Print the result\t\nprint(seed_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s -49347us/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ -0s -49111us/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 9ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 9ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 21ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 22ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\nLaurence went to Dublin that through miss cask hall hall glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten glisten\n```\n:::\n:::\n\n\n# Generating next 100 Text and random choose from top 3 probabilities words\n\n::: {#e80e6b08 .cell execution_count=25}\n``` {.python .cell-code}\n# Define seed text\nseed_text = \"Laurence went to Dublin\"\n\n# Define total words to predict\nnext_words = 100\n\n# Loop until desired length is reached\nfor _ in range(next_words):\n\n\t# Convert the seed text to a token sequence\n  token_list = tokenizer.texts_to_sequences([seed_text])[0]\n\n\t# Pad the sequence\n  token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n\t\n\t# Feed to the model and get the probabilities for each index\n  probabilities = model.predict(token_list)\n\n  # Pick a random number from [1,2,3]\n  choice = np.random.choice([1,2,3])\n\t\n  # Sort the probabilities in ascending order \n  # and get the random choice from the end of the array\n  predicted = np.argsort(probabilities)[0][-choice]\n\n\t# Ignore if index is 0 because that is just the padding.\n  if predicted != 0:\n\t\t\n\t\t# Look up the word associated with the index. \n\t  output_word = tokenizer.index_word[predicted]\n\n\t\t# Combine with the seed text\n\t  seed_text += \" \" + output_word\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n```\n:::\n:::\n\n\n::: {#dedd6c54 .cell execution_count=26}\n``` {.python .cell-code}\n# Print the result\t\nprint(seed_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLaurence went to Dublin that through end brooks banished mchugh might spent reel boys boys round how entangled runctions ask were hoops pound hall nice entangled didnt glisten rose glisten man didnt how round twas nelly nelly him he call rose glisten wall minute and jeremy a reel him girls how didnt brooks rose declared farm jig again again able squeezed glisten reel i out brooks lanigan rose rose relations free ask ask colleen eyes nice swore singing your rose eyes swore mavrone singing invitation glisten mchugh terrible drop jig hall rose glisten rose glisten wall wall grand didnt glisten glisten colleen further colleen\n```\n:::\n:::\n\n\n# using a bigger dataset\n\n# input data\n\n::: {#121184b5 .cell execution_count=27}\n``` {.python .cell-code}\ndata=open('Laurences_generated_poetry.txt').read()\n\n# Split the long string per line and put in a list\ncorpus = data.lower().split(\"\\n\")\n```\n:::\n\n\nhave total 1692 lines of words\n\n::: {#b3e7a30e .cell execution_count=28}\n``` {.python .cell-code}\nlen(corpus)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n1692\n```\n:::\n:::\n\n\n::: {#ea405f0b .cell execution_count=29}\n``` {.python .cell-code}\n# Preview the result\n#print(corpus)\n```\n:::\n\n\n::: {#ce660c8d .cell execution_count=30}\n``` {.python .cell-code}\n# Initialize the Tokenizer class\ntokenizer = Tokenizer()\n\n# Generate the word index dictionary\ntokenizer.fit_on_texts(corpus)\n\n# Define the total words. You add 1 for the index `0` which is just the padding token.\ntotal_words = len(tokenizer.word_index) + 1\n\n#print(f'word index dictionary: {tokenizer.word_index}')\n```\n:::\n\n\nhave total 2690 unique words\n\n::: {#74273368 .cell execution_count=31}\n``` {.python .cell-code}\nprint(f'total words: {total_words}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal words: 2690\n```\n:::\n:::\n\n\n# Preprocessing the Dataset\n\nNext, you will be generating the training sequences and their labels. As discussed in the lectures, you will take each line of the song and generate inputs and labels from it. For example, if you only have one sentence: \"I am using Tensorflow\", you want the model to learn the next word given any subphrase of this sentence:\n\n## INPUT LABEL\n\nI ---\\> am I am ---\\> using I am using ---\\> Tensorflow\n\n::: {#e48e82cb .cell execution_count=32}\n``` {.python .cell-code}\n# Initialize the sequences list\ninput_sequences = []\n\n# Loop over every line\nfor line in corpus:\n\n\t# Tokenize the current line\n\ttoken_list = tokenizer.texts_to_sequences([line])[0]\n\n\t# Loop over the line several times to generate the subphrases\n\tfor i in range(1, len(token_list)):\n\t\t\n\t\t# Generate the subphrase\n\t\tn_gram_sequence = token_list[:i+1]\n\n\t\t# Append the subphrase to the sequences list\n\t\tinput_sequences.append(n_gram_sequence)\n\nmax_sequence_len = max([len(x) for x in input_sequences])\nmax_sequence_len\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n16\n```\n:::\n:::\n\n\n::: {#8f34d111 .cell execution_count=33}\n``` {.python .cell-code}\n# Pad all sequences\ninput_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))\n\n# Create inputs and label by splitting the last token in the subphrases\nxs, labels = input_sequences[:,:-1],input_sequences[:,-1]\n\n# Convert the label into one-hot arrays\nys = tf.keras.utils.to_categorical(labels, num_classes=total_words)\n```\n:::\n\n\nfirst sentence\n\n::: {#e858744d .cell execution_count=34}\n``` {.python .cell-code}\n# Get sample sentence\nsentence = corpus[0].split()\nprint(f'sample sentence: {sentence}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsample sentence: ['come', 'all', 'ye', 'maidens', 'young', 'and', 'fair']\n```\n:::\n:::\n\n\nfirst sentence after tokenizer\n\n::: {#44c16421 .cell execution_count=35}\n``` {.python .cell-code}\n# Initialize token list\ntoken_list = []\n\n# Look up the indices of each word and append to the list\nfor word in sentence: \n  token_list.append(tokenizer.word_index[word])\n\n# Print the token list\nprint(token_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[51, 12, 96, 1217, 48, 2, 69]\n```\n:::\n:::\n\n\n::: {#ab745043 .cell execution_count=36}\n``` {.python .cell-code}\nprint(xs[5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[   0    0    0    0    0    0    0    0    0   51   12   96 1217   48\n    2]\n```\n:::\n:::\n\n\n::: {#2451cdf1 .cell execution_count=37}\n``` {.python .cell-code}\nprint(ys[5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0. 0. 0. ... 0. 0. 0.]\n```\n:::\n:::\n\n\n::: {#42aa0562 .cell execution_count=38}\n``` {.python .cell-code}\n# Pick element\nelem_number = 6\n\n# Print token list and phrase\nprint(f'token list: {xs[elem_number]}')\nprint(f'decoded to text: {tokenizer.sequences_to_texts([xs[elem_number]])}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntoken list: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 2]\ndecoded to text: ['and']\n```\n:::\n:::\n\n\n::: {#79821ceb .cell execution_count=39}\n``` {.python .cell-code}\n# Print label\nprint(f'one-hot label: {ys[elem_number]}')\nprint(f'index of label: {np.argmax(ys[elem_number])}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\none-hot label: [0. 0. 0. ... 0. 0. 0.]\nindex of label: 11\n```\n:::\n:::\n\n\n::: {#dc40363f .cell execution_count=40}\n``` {.python .cell-code}\n# Pick element\nelem_number = 5\n\n# Print token list and phrase\nprint(f'token list: {xs[elem_number]}')\nprint(f'decoded to text: {tokenizer.sequences_to_texts([xs[elem_number]])}')\n\n# Print label\nprint(f'one-hot label: {ys[elem_number]}')\nprint(f'index of label: {np.argmax(ys[elem_number])}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntoken list: [   0    0    0    0    0    0    0    0    0   51   12   96 1217   48\n    2]\ndecoded to text: ['come all ye maidens young and']\none-hot label: [0. 0. 0. ... 0. 0. 0.]\nindex of label: 69\n```\n:::\n:::\n\n\n# Build the Model\n\n## define model\n\n::: {#73239b2e .cell execution_count=41}\n``` {.python .cell-code}\n# Build the model\nmodel = Sequential([\n          Embedding(total_words, 64),\n          Bidirectional(LSTM(20)),\n          Dense(total_words, activation='softmax')\n])\n```\n:::\n\n\n## compile model\n\n::: {#ee95673f .cell execution_count=42}\n``` {.python .cell-code}\n# Use categorical crossentropy because this is a multi-class problem\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Print the model summary\nmodel.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ bidirectional_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>) │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n:::\n\n\n## train model\n\n::: {#698365f9 .cell execution_count=43}\n``` {.python .cell-code}\n# Train the model\nhistory = model.fit(xs, ys, epochs=20,verbose=0)\n```\n:::\n\n\n## model performance:\n\n::: {#9e794447 .cell execution_count=44}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Plot utility\ndef plot_graphs(history, string):\n  plt.plot(history.history[string])\n  plt.xlabel(\"Epochs\")\n  plt.ylabel(string)\n  plt.show()\n\n# Visualize the accuracy\nplot_graphs(history, 'accuracy')\n```\n\n::: {.cell-output .cell-output-display}\n![](c3week4_files/figure-html/cell-45-output-1.png){width=597 height=429}\n:::\n:::\n\n\n# Generating next word\n\n::: {#1f8b9054 .cell execution_count=45}\n``` {.python .cell-code}\nseed_text = \"Laurence went to Dublin\"\n\ntoken_list = tokenizer.texts_to_sequences([seed_text])[0]\ntoken_list\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n[173, 4, 151]\n```\n:::\n:::\n\n\n::: {#53184b0c .cell execution_count=46}\n``` {.python .cell-code}\ntoken_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\ntoken_list\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\narray([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 173,\n          4, 151]], dtype=int32)\n```\n:::\n:::\n\n\n::: {#5306b66f .cell execution_count=47}\n``` {.python .cell-code}\nprobabilities = model.predict(token_list)\n\npredicted = np.argmax(probabilities, axis=-1)[0]\npredicted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 144ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 144ms/step\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n2\n```\n:::\n:::\n\n\n::: {#03d41090 .cell execution_count=48}\n``` {.python .cell-code}\noutput_word = tokenizer.index_word[predicted]\noutput_word\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n'and'\n```\n:::\n:::\n\n\n# Generating next 100 Text\n\n::: {#697fa1c8 .cell execution_count=49}\n``` {.python .cell-code}\n# Define seed text\nseed_text = \"Laurence went to Dublin\"\n\n# Define total words to predict\nnext_words = 100\n\n# Loop until desired length is reached\nfor _ in range(next_words):\n\n\t# Convert the seed text to a token sequence\n\ttoken_list = tokenizer.texts_to_sequences([seed_text])[0]\n\n\t# Pad the sequence\n\ttoken_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n\t\n\t# Feed to the model and get the probabilities for each index\n\tprobabilities = model.predict(token_list)\n\n\t# Get the index with the highest probability\n\tpredicted = np.argmax(probabilities, axis=-1)[0]\n\n\t# Ignore if index is 0 because that is just the padding.\n\tif predicted != 0:\n\t\t\n\t\t# Look up the word associated with the index. \n\t\toutput_word = tokenizer.index_word[predicted]\n\n\t\t# Combine with the seed text\n\t\tseed_text += \" \" + output_word\n\n# Print the result\t\nprint(seed_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\nLaurence went to Dublin and the heart to the heart to toome today of toome today of toome today of toome today of toome bubblin today bubblin today bubblin indeed of indeed racking today today of toome today of toome today of toome today of toome today today of toome bubblin indeed of indeed indeed me today of toome today of toome today of toome today of toome today of indeed of indeed indeed me today of toome today of toome today of toome today of toome today of indeed of indeed indeed me today of toome today of toome today of toome today\n```\n:::\n:::\n\n\n# Generating next 100 Text and random choose from top 3 probabilities words\n\n::: {#a3bf5dc9 .cell execution_count=50}\n``` {.python .cell-code}\n# Define seed text\nseed_text = \"Laurence went to Dublin\"\n\n# Define total words to predict\nnext_words = 100\n\n# Loop until desired length is reached\nfor _ in range(next_words):\n\n\t# Convert the seed text to a token sequence\n  token_list = tokenizer.texts_to_sequences([seed_text])[0]\n\n\t# Pad the sequence\n  token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n\t\n\t# Feed to the model and get the probabilities for each index\n  probabilities = model.predict(token_list)\n\n  # Pick a random number from [1,2,3]\n  choice = np.random.choice([1,2,3])\n\t\n  # Sort the probabilities in ascending order \n  # and get the random choice from the end of the array\n  predicted = np.argsort(probabilities)[0][-choice]\n\n\t# Ignore if index is 0 because that is just the padding.\n  if predicted != 0:\n\t\t\n\t\t# Look up the word associated with the index. \n\t  output_word = tokenizer.index_word[predicted]\n\n\t\t# Combine with the seed text\n\t  seed_text += \" \" + output_word\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step\n```\n:::\n:::\n\n\n::: {#3ba05901 .cell execution_count=51}\n``` {.python .cell-code}\n# Print the result\t\nprint(seed_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLaurence went to Dublin old old old of the bow and me old town today of today today today today today and today of of by toome today today and shrill today of toome and fulfill laughing laughing today and laughing with laughing by night and the green today today today of today of toome of today of by toome today of of erin toome by by toome and racking laughing laughing laughing of smelled your heart of erin go today of by the heart today of toome and toome of toome of by toome today today of today bubblin today and sprightly of\n```\n:::\n:::\n\n\n# resource:\n\nhttps://www.coursera.org/learn/natural-language-processing-tensorflow\n\nhttps://github.com/https-deeplearning-ai/tensorflow-1-public/tree/main/C3\n\n",
    "supporting": [
      "c3week4_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}