{
  "hash": "6baa7f8a6772bab6a389a79d1491a6a4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"W4:Sequence models and literature\"\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\nWeek4 Sequence models and literature\n\nTaking everything that you've learned in training a neural network based on NLP, we thought it might be a bit of fun to turn the tables away from classification and use your knowledge for prediction. Given a body of words, you could conceivably predict the word most likely to follow a given word or phrase, and once you've done that, to do it again, and again. With that in mind, this week you'll build a poetry generator. It's trained with the lyrics from traditional Irish songs, and can be used to produce beautiful-sounding verse of it's own!\n\nLong short-term memory (LSTM) is a type of recurrent neural network (RNN)\n\n::: {#5d43ccff .cell execution_count=1}\n``` {.python .cell-code}\nimport tensorflow as tf\nimport numpy as np \nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n```\n:::\n\n\n# input data\n\n::: {#343ec0ed .cell execution_count=2}\n``` {.python .cell-code}\n# Define the lyrics of the song\ndata=\"In the town of Athy one Jeremy Lanigan \\n Battered away til he hadnt a pound. \\nHis father died and made him a man again \\n Left him a farm and ten acres of ground. \\nHe gave a grand party for friends and relations \\nWho didnt forget him when come to the wall, \\nAnd if youll but listen Ill make your eyes glisten \\nOf the rows and the ructions of Lanigans Ball. \\nMyself to be sure got free invitation, \\nFor all the nice girls and boys I might ask, \\nAnd just in a minute both friends and relations \\nWere dancing round merry as bees round a cask. \\nJudy ODaly, that nice little milliner, \\nShe tipped me a wink for to give her a call, \\nAnd I soon arrived with Peggy McGilligan \\nJust in time for Lanigans Ball. \\nThere were lashings of punch and wine for the ladies, \\nPotatoes and cakes; there was bacon and tea, \\nThere were the Nolans, Dolans, OGradys \\nCourting the girls and dancing away. \\nSongs they went round as plenty as water, \\nThe harp that once sounded in Taras old hall,\\nSweet Nelly Gray and The Rat Catchers Daughter,\\nAll singing together at Lanigans Ball. \\nThey were doing all kinds of nonsensical polkas \\nAll round the room in a whirligig. \\nJulia and I, we banished their nonsense \\nAnd tipped them the twist of a reel and a jig. \\nAch mavrone, how the girls got all mad at me \\nDanced til youd think the ceiling would fall. \\nFor I spent three weeks at Brooks Academy \\nLearning new steps for Lanigans Ball. \\nThree long weeks I spent up in Dublin, \\nThree long weeks to learn nothing at all,\\n Three long weeks I spent up in Dublin, \\nLearning new steps for Lanigans Ball. \\nShe stepped out and I stepped in again, \\nI stepped out and she stepped in again, \\nShe stepped out and I stepped in again, \\nLearning new steps for Lanigans Ball. \\nBoys were all merry and the girls they were hearty \\nAnd danced all around in couples and groups, \\nTil an accident happened, young Terrance McCarthy \\nPut his right leg through miss Finnertys hoops. \\nPoor creature fainted and cried Meelia murther, \\nCalled for her brothers and gathered them all. \\nCarmody swore that hed go no further \\nTil he had satisfaction at Lanigans Ball. \\nIn the midst of the row miss Kerrigan fainted, \\nHer cheeks at the same time as red as a rose. \\nSome of the lads declared she was painted, \\nShe took a small drop too much, I suppose. \\nHer sweetheart, Ned Morgan, so powerful and able, \\nWhen he saw his fair colleen stretched out by the wall, \\nTore the left leg from under the table \\nAnd smashed all the Chaneys at Lanigans Ball. \\nBoys, oh boys, twas then there were runctions. \\nMyself got a lick from big Phelim McHugh. \\nI soon replied to his introduction \\nAnd kicked up a terrible hullabaloo. \\nOld Casey, the piper, was near being strangled. \\nThey squeezed up his pipes, bellows, chanters and all. \\nThe girls, in their ribbons, they got all entangled \\nAnd that put an end to Lanigans Ball.\"\n\n# Split the long string per line and put in a list\ncorpus = data.lower().split(\"\\n\")\n```\n:::\n\n\nonly have total 64 lines of words\n\n::: {#0e6ea90e .cell execution_count=3}\n``` {.python .cell-code}\nlen(corpus)\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\n64\n```\n:::\n:::\n\n\n::: {#7eb8fd36 .cell execution_count=4}\n``` {.python .cell-code}\n# Preview the result\nprint(corpus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['in the town of athy one jeremy lanigan ', ' battered away til he hadnt a pound. ', 'his father died and made him a man again ', ' left him a farm and ten acres of ground. ', 'he gave a grand party for friends and relations ', 'who didnt forget him when come to the wall, ', 'and if youll but listen ill make your eyes glisten ', 'of the rows and the ructions of lanigans ball. ', 'myself to be sure got free invitation, ', 'for all the nice girls and boys i might ask, ', 'and just in a minute both friends and relations ', 'were dancing round merry as bees round a cask. ', 'judy odaly, that nice little milliner, ', 'she tipped me a wink for to give her a call, ', 'and i soon arrived with peggy mcgilligan ', 'just in time for lanigans ball. ', 'there were lashings of punch and wine for the ladies, ', 'potatoes and cakes; there was bacon and tea, ', 'there were the nolans, dolans, ogradys ', 'courting the girls and dancing away. ', 'songs they went round as plenty as water, ', 'the harp that once sounded in taras old hall,', 'sweet nelly gray and the rat catchers daughter,', 'all singing together at lanigans ball. ', 'they were doing all kinds of nonsensical polkas ', 'all round the room in a whirligig. ', 'julia and i, we banished their nonsense ', 'and tipped them the twist of a reel and a jig. ', 'ach mavrone, how the girls got all mad at me ', 'danced til youd think the ceiling would fall. ', 'for i spent three weeks at brooks academy ', 'learning new steps for lanigans ball. ', 'three long weeks i spent up in dublin, ', 'three long weeks to learn nothing at all,', ' three long weeks i spent up in dublin, ', 'learning new steps for lanigans ball. ', 'she stepped out and i stepped in again, ', 'i stepped out and she stepped in again, ', 'she stepped out and i stepped in again, ', 'learning new steps for lanigans ball. ', 'boys were all merry and the girls they were hearty ', 'and danced all around in couples and groups, ', 'til an accident happened, young terrance mccarthy ', 'put his right leg through miss finnertys hoops. ', 'poor creature fainted and cried meelia murther, ', 'called for her brothers and gathered them all. ', 'carmody swore that hed go no further ', 'til he had satisfaction at lanigans ball. ', 'in the midst of the row miss kerrigan fainted, ', 'her cheeks at the same time as red as a rose. ', 'some of the lads declared she was painted, ', 'she took a small drop too much, i suppose. ', 'her sweetheart, ned morgan, so powerful and able, ', 'when he saw his fair colleen stretched out by the wall, ', 'tore the left leg from under the table ', 'and smashed all the chaneys at lanigans ball. ', 'boys, oh boys, twas then there were runctions. ', 'myself got a lick from big phelim mchugh. ', 'i soon replied to his introduction ', 'and kicked up a terrible hullabaloo. ', 'old casey, the piper, was near being strangled. ', 'they squeezed up his pipes, bellows, chanters and all. ', 'the girls, in their ribbons, they got all entangled ', 'and that put an end to lanigans ball.']\n```\n:::\n:::\n\n\n::: {#2e36af3e .cell execution_count=5}\n``` {.python .cell-code}\n# Initialize the Tokenizer class\ntokenizer = Tokenizer()\n\n# Generate the word index dictionary\ntokenizer.fit_on_texts(corpus)\n\n# Define the total words. You add 1 for the index `0` which is just the padding token.\ntotal_words = len(tokenizer.word_index) + 1\n\n#print(f'word index dictionary: {tokenizer.word_index}')\n```\n:::\n\n\nonly have total 263 unique words\n\n::: {#e2cc1d23 .cell execution_count=6}\n``` {.python .cell-code}\nprint(f'total words: {total_words}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal words: 263\n```\n:::\n:::\n\n\n# Preprocessing the Dataset\n\nNext, you will be generating the training sequences and their labels. As discussed in the lectures, you will take each line of the song and generate inputs and labels from it. For example, if you only have one sentence: \"I am using Tensorflow\", you want the model to learn the next word given any subphrase of this sentence:\n\n## INPUT LABEL\n\nI ---\\> am I am ---\\> using I am using ---\\> Tensorflow\n\n![](images/Screenshot 2024-04-28 at 16.22.37.png)\n\n::: {#805ee9cc .cell execution_count=7}\n``` {.python .cell-code}\n# Initialize the sequences list\ninput_sequences = []\n\n# Loop over every line\nfor line in corpus:\n\n\t# Tokenize the current line\n\ttoken_list = tokenizer.texts_to_sequences([line])[0]\n\n\t# Loop over the line several times to generate the subphrases\n\tfor i in range(1, len(token_list)):\n\t\t\n\t\t# Generate the subphrase\n\t\tn_gram_sequence = token_list[:i+1]\n\n\t\t# Append the subphrase to the sequences list\n\t\tinput_sequences.append(n_gram_sequence)\n\n# Get the length of the longest line\nmax_sequence_len = max([len(x) for x in input_sequences])\nmax_sequence_len\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\n11\n```\n:::\n:::\n\n\n::: {#028b718a .cell execution_count=8}\n``` {.python .cell-code}\n# Pad all sequences\ninput_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))\n\n# Create inputs and label by splitting the last token in the subphrases\nxs, labels = input_sequences[:,:-1],input_sequences[:,-1]\n\n# Convert the label into one-hot arrays\nys = tf.keras.utils.to_categorical(labels, num_classes=total_words)\n```\n:::\n\n\nfirst sentence\n\n::: {#ebb821f8 .cell execution_count=9}\n``` {.python .cell-code}\n# Get sample sentence\nsentence = corpus[0].split()\nprint(f'sample sentence: {sentence}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsample sentence: ['in', 'the', 'town', 'of', 'athy', 'one', 'jeremy', 'lanigan']\n```\n:::\n:::\n\n\nfirst sentence after tokenizer\n\n::: {#2debbd6e .cell execution_count=10}\n``` {.python .cell-code}\n# Initialize token list\ntoken_list = []\n\n# Look up the indices of each word and append to the list\nfor word in sentence: \n  token_list.append(tokenizer.word_index[word])\n```\n:::\n\n\n::: {#e2be5cc6 .cell execution_count=11}\n``` {.python .cell-code}\n# Print the token list\nprint(token_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[4, 2, 66, 8, 67, 68, 69, 70]\n```\n:::\n:::\n\n\n::: {#831ec7df .cell execution_count=12}\n``` {.python .cell-code}\nprint(xs[5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 0  0  0  0  4  2 66  8 67 68]\n```\n:::\n:::\n\n\n::: {#edc96fbd .cell execution_count=13}\n``` {.python .cell-code}\nprint(ys[5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n```\n:::\n:::\n\n\n::: {#366c1a50 .cell execution_count=14}\n``` {.python .cell-code}\n# Pick element\nelem_number = 6\n\n# Print token list and phrase\nprint(f'token list: {xs[elem_number]}')\nprint(f'decoded to text: {tokenizer.sequences_to_texts([xs[elem_number]])}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntoken list: [ 0  0  0  4  2 66  8 67 68 69]\ndecoded to text: ['in the town of athy one jeremy']\n```\n:::\n:::\n\n\n::: {#e83ce409 .cell execution_count=15}\n``` {.python .cell-code}\n# Print label\nprint(f'one-hot label: {ys[elem_number]}')\nprint(f'index of label: {np.argmax(ys[elem_number])}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\none-hot label: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\nindex of label: 70\n```\n:::\n:::\n\n\n::: {#6d88fbf1 .cell execution_count=16}\n``` {.python .cell-code}\n# Pick element\nelem_number = 5\n\n# Print token list and phrase\nprint(f'token list: {xs[elem_number]}')\nprint(f'decoded to text: {tokenizer.sequences_to_texts([xs[elem_number]])}')\n\n# Print label\nprint(f'one-hot label: {ys[elem_number]}')\nprint(f'index of label: {np.argmax(ys[elem_number])}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntoken list: [ 0  0  0  0  4  2 66  8 67 68]\ndecoded to text: ['in the town of athy one']\none-hot label: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\nindex of label: 69\n```\n:::\n:::\n\n\n# Build the Model\n\n## define model\n\n::: {#9817410a .cell execution_count=17}\n``` {.python .cell-code}\n# Build the model\nmodel = Sequential([\n          Embedding(total_words, 64),\n          Bidirectional(LSTM(20)),\n          Dense(total_words, activation='softmax')\n])\n```\n:::\n\n\n## compile model\n\n::: {#1c35cba0 .cell execution_count=18}\n``` {.python .cell-code}\n# Use categorical crossentropy because this is a multi-class problem\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Print the model summary\nmodel.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_2\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ bidirectional_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>) │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n:::\n\n\n## train model\n\n::: {#32388a86 .cell execution_count=19}\n``` {.python .cell-code}\n# Train the model\nhistory = model.fit(xs, ys, epochs=500,verbose=0)\n```\n:::\n\n\n## model performance:\n\n::: {#a83a5245 .cell execution_count=20}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Plot utility\ndef plot_graphs(history, string):\n  plt.plot(history.history[string])\n  plt.xlabel(\"Epochs\")\n  plt.ylabel(string)\n  plt.show()\n\n# Visualize the accuracy\nplot_graphs(history, 'accuracy')\n```\n\n::: {.cell-output .cell-output-display}\n![](c3week4_files/figure-html/cell-21-output-1.png){width=589 height=434}\n:::\n:::\n\n\n# Generating next word\n\n::: {#c0bdbe0c .cell execution_count=21}\n``` {.python .cell-code}\nseed_text = \"Laurence went to Dublin\"\n\ntoken_list = tokenizer.texts_to_sequences([seed_text])[0]\ntoken_list\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\n[134, 13, 59]\n```\n:::\n:::\n\n\n::: {#b8b3404a .cell execution_count=22}\n``` {.python .cell-code}\ntoken_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\ntoken_list\n```\n\n::: {.cell-output .cell-output-display execution_count=75}\n```\narray([[  0,   0,   0,   0,   0,   0,   0, 134,  13,  59]], dtype=int32)\n```\n:::\n:::\n\n\n::: {#349e6146 .cell execution_count=23}\n``` {.python .cell-code}\nprobabilities = model.predict(token_list)\n\npredicted = np.argmax(probabilities, axis=-1)[0]\npredicted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 107ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 108ms/step\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=76}\n```\n137\n```\n:::\n:::\n\n\n::: {#484d89c5 .cell execution_count=24}\n``` {.python .cell-code}\noutput_word = tokenizer.index_word[predicted]\noutput_word\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\n'harp'\n```\n:::\n:::\n\n\n# Generating next 100 Text\n\n::: {#82599c96 .cell execution_count=25}\n``` {.python .cell-code}\n# Define seed text\nseed_text = \"Laurence went to Dublin\"\n\n# Define total words to predict\nnext_words = 100\n\n# Loop until desired length is reached\nfor _ in range(next_words):\n\n\t# Convert the seed text to a token sequence\n\ttoken_list = tokenizer.texts_to_sequences([seed_text])[0]\n\n\t# Pad the sequence\n\ttoken_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n\t\n\t# Feed to the model and get the probabilities for each index\n\tprobabilities = model.predict(token_list)\n\n\t# Get the index with the highest probability\n\tpredicted = np.argmax(probabilities, axis=-1)[0]\n\n\t# Ignore if index is 0 because that is just the padding.\n\tif predicted != 0:\n\t\t\n\t\t# Look up the word associated with the index. \n\t\toutput_word = tokenizer.index_word[predicted]\n\n\t\t# Combine with the seed text\n\t\tseed_text += \" \" + output_word\n```\n:::\n\n\n::: {#0fe83083 .cell execution_count=26}\n``` {.python .cell-code}\n# Print the result\t\nprint(seed_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLaurence went to Dublin harp stepped out and all all relations relations jig eyes suppose suppose glisten eyes midst brothers stepped stepped stepped in again again again again again again again suppose eyes away soon jig eyes glisten glisten pipes relations a rose eyes glisten suppose mcgilligan glisten glisten eyes away stepped call stepped stepped stepped in again again again again again again again suppose eyes away soon jig eyes glisten glisten pipes relations a rose eyes glisten suppose mcgilligan glisten glisten eyes away stepped call stepped stepped stepped in again again again again again again again suppose eyes away soon jig eyes glisten\n```\n:::\n:::\n\n\n# Generating next 100 Text and random choose from top 3 probabilities words\n\n::: {#9ae86091 .cell execution_count=27}\n``` {.python .cell-code}\n# Define seed text\nseed_text = \"Laurence went to Dublin\"\n\n# Define total words to predict\nnext_words = 100\n\n# Loop until desired length is reached\nfor _ in range(next_words):\n\n\t# Convert the seed text to a token sequence\n  token_list = tokenizer.texts_to_sequences([seed_text])[0]\n\n\t# Pad the sequence\n  token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n\t\n\t# Feed to the model and get the probabilities for each index\n  probabilities = model.predict(token_list)\n\n  # Pick a random number from [1,2,3]\n  choice = np.random.choice([1,2,3])\n\t\n  # Sort the probabilities in ascending order \n  # and get the random choice from the end of the array\n  predicted = np.argsort(probabilities)[0][-choice]\n\n\t# Ignore if index is 0 because that is just the padding.\n  if predicted != 0:\n\t\t\n\t\t# Look up the word associated with the index. \n\t  output_word = tokenizer.index_word[predicted]\n\n\t\t# Combine with the seed text\n\t  seed_text += \" \" + output_word\n```\n:::\n\n\n::: {#6a81cc6e .cell execution_count=28}\n``` {.python .cell-code}\n# Print the result\t\nprint(seed_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLaurence went to Dublin girls and round couples and groups relations relations make jig eyes glisten glisten listen listen glisten cask glisten one drop cask glisten cask cask man stepped in again relations we jig rose jig jig eyes might hall glisten call man again they saw jig stepped in and again again we ask call jig eyes suppose might glisten jig eyes suppose glisten man again i again relations ground glisten glisten glisten eyes away stepped up we call rose catchers catchers call daughter catchers eyes eyes suppose town suppose town midst mavrone brothers squeezed steps for lanigans friends in dublin dublin relations\n```\n:::\n:::\n\n\n# using a bigger dataset\n\n# input data\n\n::: {#220ffce7 .cell execution_count=29}\n``` {.python .cell-code}\ndata=open('Laurences_generated_poetry.txt').read()\n\n# Split the long string per line and put in a list\ncorpus = data.lower().split(\"\\n\")\n```\n:::\n\n\nhave total 1692 lines of words\n\n::: {#adcaf0b7 .cell execution_count=30}\n``` {.python .cell-code}\nlen(corpus)\n```\n\n::: {.cell-output .cell-output-display execution_count=83}\n```\n1692\n```\n:::\n:::\n\n\n::: {#33f4da3c .cell execution_count=31}\n``` {.python .cell-code}\n# Preview the result\n#print(corpus)\n```\n:::\n\n\n::: {#519f0c5c .cell execution_count=32}\n``` {.python .cell-code}\n# Initialize the Tokenizer class\ntokenizer = Tokenizer()\n\n# Generate the word index dictionary\ntokenizer.fit_on_texts(corpus)\n\n# Define the total words. You add 1 for the index `0` which is just the padding token.\ntotal_words = len(tokenizer.word_index) + 1\n\n#print(f'word index dictionary: {tokenizer.word_index}')\n```\n:::\n\n\nhave total 2690 unique words\n\n::: {#3df00e29 .cell execution_count=33}\n``` {.python .cell-code}\nprint(f'total words: {total_words}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal words: 2690\n```\n:::\n:::\n\n\n# Preprocessing the Dataset\n\nNext, you will be generating the training sequences and their labels. As discussed in the lectures, you will take each line of the song and generate inputs and labels from it. For example, if you only have one sentence: \"I am using Tensorflow\", you want the model to learn the next word given any subphrase of this sentence:\n\n## INPUT LABEL\n\nI ---\\> am I am ---\\> using I am using ---\\> Tensorflow\n\n::: {#2190d1c0 .cell execution_count=34}\n``` {.python .cell-code}\n# Initialize the sequences list\ninput_sequences = []\n\n# Loop over every line\nfor line in corpus:\n\n\t# Tokenize the current line\n\ttoken_list = tokenizer.texts_to_sequences([line])[0]\n\n\t# Loop over the line several times to generate the subphrases\n\tfor i in range(1, len(token_list)):\n\t\t\n\t\t# Generate the subphrase\n\t\tn_gram_sequence = token_list[:i+1]\n\n\t\t# Append the subphrase to the sequences list\n\t\tinput_sequences.append(n_gram_sequence)\n```\n:::\n\n\n::: {#1c8b9555 .cell execution_count=35}\n``` {.python .cell-code}\nmax_sequence_len = max([len(x) for x in input_sequences])\nmax_sequence_len\n```\n\n::: {.cell-output .cell-output-display execution_count=88}\n```\n16\n```\n:::\n:::\n\n\n::: {#038bfc0b .cell execution_count=36}\n``` {.python .cell-code}\n# Pad all sequences\ninput_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))\n\n# Create inputs and label by splitting the last token in the subphrases\nxs, labels = input_sequences[:,:-1],input_sequences[:,-1]\n\n# Convert the label into one-hot arrays\nys = tf.keras.utils.to_categorical(labels, num_classes=total_words)\n```\n:::\n\n\nfirst sentence\n\n::: {#55e53e06 .cell execution_count=37}\n``` {.python .cell-code}\n# Get sample sentence\nsentence = corpus[0].split()\nprint(f'sample sentence: {sentence}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsample sentence: ['come', 'all', 'ye', 'maidens', 'young', 'and', 'fair']\n```\n:::\n:::\n\n\nfirst sentence after tokenizer\n\n::: {#9f013c14 .cell execution_count=38}\n``` {.python .cell-code}\n# Initialize token list\ntoken_list = []\n\n# Look up the indices of each word and append to the list\nfor word in sentence: \n  token_list.append(tokenizer.word_index[word])\n```\n:::\n\n\n::: {#32b615f0 .cell execution_count=39}\n``` {.python .cell-code}\n# Print the token list\nprint(token_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[51, 12, 96, 1217, 48, 2, 69]\n```\n:::\n:::\n\n\n::: {#b0ba5d7e .cell execution_count=40}\n``` {.python .cell-code}\nprint(xs[5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[   0    0    0    0    0    0    0    0    0   51   12   96 1217   48\n    2]\n```\n:::\n:::\n\n\n::: {#d2ffa9e2 .cell execution_count=41}\n``` {.python .cell-code}\nprint(ys[5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0. 0. 0. ... 0. 0. 0.]\n```\n:::\n:::\n\n\n::: {#2d928b3f .cell execution_count=42}\n``` {.python .cell-code}\n# Pick element\nelem_number = 6\n\n# Print token list and phrase\nprint(f'token list: {xs[elem_number]}')\nprint(f'decoded to text: {tokenizer.sequences_to_texts([xs[elem_number]])}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntoken list: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 2]\ndecoded to text: ['and']\n```\n:::\n:::\n\n\n::: {#033e4f01 .cell execution_count=43}\n``` {.python .cell-code}\n# Print label\nprint(f'one-hot label: {ys[elem_number]}')\nprint(f'index of label: {np.argmax(ys[elem_number])}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\none-hot label: [0. 0. 0. ... 0. 0. 0.]\nindex of label: 11\n```\n:::\n:::\n\n\n::: {#3ccbe149 .cell execution_count=44}\n``` {.python .cell-code}\n# Pick element\nelem_number = 5\n\n# Print token list and phrase\nprint(f'token list: {xs[elem_number]}')\nprint(f'decoded to text: {tokenizer.sequences_to_texts([xs[elem_number]])}')\n\n# Print label\nprint(f'one-hot label: {ys[elem_number]}')\nprint(f'index of label: {np.argmax(ys[elem_number])}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntoken list: [   0    0    0    0    0    0    0    0    0   51   12   96 1217   48\n    2]\ndecoded to text: ['come all ye maidens young and']\none-hot label: [0. 0. 0. ... 0. 0. 0.]\nindex of label: 69\n```\n:::\n:::\n\n\n# Build the Model\n\n## define model\n\n::: {#7dcf7027 .cell execution_count=45}\n``` {.python .cell-code}\n# Build the model\nmodel = Sequential([\n          Embedding(total_words, 64),\n          Bidirectional(LSTM(20)),\n          Dense(total_words, activation='softmax')\n])\n```\n:::\n\n\n## compile model\n\n::: {#c6a07c15 .cell execution_count=46}\n``` {.python .cell-code}\n# Use categorical crossentropy because this is a multi-class problem\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Print the model summary\nmodel.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_3\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ bidirectional_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>) │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n:::\n\n\n## train model\n\n::: {#4e772337 .cell execution_count=47}\n``` {.python .cell-code}\n# Train the model\nhistory = model.fit(xs, ys, epochs=20,verbose=0)\n```\n:::\n\n\n## model performance:\n\n::: {#10eca8b7 .cell execution_count=48}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Plot utility\ndef plot_graphs(history, string):\n  plt.plot(history.history[string])\n  plt.xlabel(\"Epochs\")\n  plt.ylabel(string)\n  plt.show()\n\n# Visualize the accuracy\nplot_graphs(history, 'accuracy')\n```\n\n::: {.cell-output .cell-output-display}\n![](c3week4_files/figure-html/cell-49-output-1.png){width=597 height=429}\n:::\n:::\n\n\n# Generating next word\n\n::: {#c12f690b .cell execution_count=49}\n``` {.python .cell-code}\nseed_text = \"Laurence went to Dublin\"\n\ntoken_list = tokenizer.texts_to_sequences([seed_text])[0]\ntoken_list\n```\n\n::: {.cell-output .cell-output-display execution_count=102}\n```\n[173, 4, 151]\n```\n:::\n:::\n\n\n::: {#7d066d53 .cell execution_count=50}\n``` {.python .cell-code}\ntoken_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\ntoken_list\n```\n\n::: {.cell-output .cell-output-display execution_count=103}\n```\narray([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 173,\n          4, 151]], dtype=int32)\n```\n:::\n:::\n\n\n::: {#455fceb8 .cell execution_count=51}\n``` {.python .cell-code}\nprobabilities = model.predict(token_list)\n\npredicted = np.argmax(probabilities, axis=-1)[0]\npredicted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 105ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 106ms/step\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=104}\n```\n2\n```\n:::\n:::\n\n\n::: {#b4abc6f3 .cell execution_count=52}\n``` {.python .cell-code}\noutput_word = tokenizer.index_word[predicted]\noutput_word\n```\n\n::: {.cell-output .cell-output-display execution_count=105}\n```\n'and'\n```\n:::\n:::\n\n\n# Generating next 100 Text\n\n::: {#f37661f2 .cell execution_count=53}\n``` {.python .cell-code}\n# Define seed text\nseed_text = \"Laurence went to Dublin\"\n\n# Define total words to predict\nnext_words = 100\n\n# Loop until desired length is reached\nfor _ in range(next_words):\n\n\t# Convert the seed text to a token sequence\n\ttoken_list = tokenizer.texts_to_sequences([seed_text])[0]\n\n\t# Pad the sequence\n\ttoken_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n\t\n\t# Feed to the model and get the probabilities for each index\n\tprobabilities = model.predict(token_list)\n\n\t# Get the index with the highest probability\n\tpredicted = np.argmax(probabilities, axis=-1)[0]\n\n\t# Ignore if index is 0 because that is just the padding.\n\tif predicted != 0:\n\t\t\n\t\t# Look up the word associated with the index. \n\t\toutput_word = tokenizer.index_word[predicted]\n\n\t\t# Combine with the seed text\n\t\tseed_text += \" \" + output_word\n```\n:::\n\n\n::: {#98bc61fd .cell execution_count=54}\n``` {.python .cell-code}\n# Print the result\t\nprint(seed_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLaurence went to Dublin and the loo casey the casey the loo hill of toome today to toome today to the fulfill today to toome today today today today today to toome today to toome today vermin fulfill fulfill whilst whilst whilst pound fulfill fulfill fulfill whilst toome fulfill fulfill today to toome today to fulfill today whilst whilst whilst whilst band whilst whilst toome fulfill fulfill whilst today to toome today to fulfill today fulfill fulfill fulfill whilst whilst today whilst fulfill fulfill fulfill whilst today to toome today to toome today to fulfill today to fulfill fulfill fulfill fulfill fulfill fulfill whilst\n```\n:::\n:::\n\n\n# Generating next 100 Text and random choose from top 3 probabilities words\n\n::: {#2388332b .cell execution_count=55}\n``` {.python .cell-code}\n# Define seed text\nseed_text = \"Laurence went to Dublin\"\n\n# Define total words to predict\nnext_words = 100\n\n# Loop until desired length is reached\nfor _ in range(next_words):\n\n\t# Convert the seed text to a token sequence\n  token_list = tokenizer.texts_to_sequences([seed_text])[0]\n\n\t# Pad the sequence\n  token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n\t\n\t# Feed to the model and get the probabilities for each index\n  probabilities = model.predict(token_list)\n\n  # Pick a random number from [1,2,3]\n  choice = np.random.choice([1,2,3])\n\t\n  # Sort the probabilities in ascending order \n  # and get the random choice from the end of the array\n  predicted = np.argsort(probabilities)[0][-choice]\n\n\t# Ignore if index is 0 because that is just the padding.\n  if predicted != 0:\n\t\t\n\t\t# Look up the word associated with the index. \n\t  output_word = tokenizer.index_word[predicted]\n\n\t\t# Combine with the seed text\n\t  seed_text += \" \" + output_word\n```\n:::\n\n\n::: {#f7c2f318 .cell execution_count=56}\n``` {.python .cell-code}\n# Print the result\t\nprint(seed_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLaurence went to Dublin of a band for a hill of the trace side to toome today to the whilst of fulfill by your laughtcr grandmother today to fulfill by my heart and me today of me bragh the fulfill of the toome today today to fulfill by to laughing by me in the morning and me laughing today of toome and fulfill by me laughing today to me heartfrom to toome fulfill whilst laughing whilst me laughing by the morning laughing by the ra ra casey the band of toome and fulfill today of toome and the fulfill of me today of the\n```\n:::\n:::\n\n\n# resource:\n\nhttps://www.coursera.org/learn/natural-language-processing-tensorflow\n\nhttps://github.com/https-deeplearning-ai/tensorflow-1-public/tree/main/C3\n\n",
    "supporting": [
      "c3week4_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}